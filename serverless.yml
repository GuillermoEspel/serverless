# For full config options, check the docs:
#    docs.serverless.com
#
service: hola-mundo
frameworkVersion: "3"

provider:
  name: aws
  runtime: nodejs14.x
  region: us-east-2
  stage: dev
  environment:
    DYNAMODB: { Ref: TaskTable }
    USER_POOL_ID: { Ref: CognitoUserPool }
    CLIENT_ID: { Ref: CognitoUserPoolClient }
    APIGATEWAY: { Ref: ApiGatewayAuthorizer }
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:*
      Resource:
        - arn:aws:dynamodb:us-east-2:170264614590:table/TaskTable
    - Effect: Allow
      Action:
        - cognito-idp:AdminInitiateAuth
        - cognito-idp:AdminCreateUser
        - cognito-idp:AdminSetUserPassword
      Resource: { Fn::GetAtt: [CognitoUserPool, Arn] }

functions:
  signupUser:
    handler: ${self:custom.folderEndpoints}/signup.handler
    events:
      - http:
          path: user/signup
          method: post
          cors: true
  loginUser:
    handler: ${self:custom.folderEndpoints}/login.handler
    events:
      - http:
          path: user/login
          method: post
          cors: true
  privateAPI:
    handler: ${self:custom.folderEndpoints}/private.handler
    events:
      - http:
          path: user/private
          method: post
          cors: true
          authorizer:
            name: PrivateAuthorizer
            type: COGNITO_USER_POOLS
            authorizerId: { Ref: ApiGatewayAuthorizer }
            claims:
              - email

  status:
    handler: ${self:custom.folderEndpoints}/status.handler
    events:
      - httpApi:
          method: get
          path: /status
  getTasks:
    handler: ${self:custom.folderEndpoints}/getTasks.handler
    events:
      - httpApi:
          method: get
          path: /tasks
  getTask:
    handler: ${self:custom.folderEndpoints}/getTask.handler
    events:
      - httpApi:
          method: get
          path: /tasks/{id}
  createTask:
    handler: ${self:custom.folderEndpoints}/createTask.handler
    events:
      - httpApi:
          method: post
          path: /tasks
  updateTask:
    handler: ${self:custom.folderEndpoints}/updateTask.handler
    events:
      - httpApi:
          method: put
          path: /tasks/{id}
  deleteTask:
    handler: ${self:custom.folderEndpoints}/deleteTask.handler
    events:
      - httpApi:
          method: delete
          path: /tasks/{id}

resources:
  Resources:
    TaskTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.tablename}
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
    CognitoUserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        UserPoolName: my-user-pool
        Schema:
          - Name: email
            Required: true
            Mutable: true
        Policies:
          PasswordPolicy:
            MinimumLength: 6
            RequireLowercase: False
            RequireNumbers: True
            RequireSymbols: False
            RequireUppercase: True
        AutoVerifiedAttributes: ["email"]
    CognitoUserPoolClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        ClientName: my-user-pool-client
        GenerateSecret: false
        UserPoolId: { Ref: CognitoUserPool }
        AccessTokenValidity: 5
        IdTokenValidity: 5
        ExplicitAuthFlows:
          - "ADMIN_NO_SRP_AUTH"
    ApiGatewayAuthorizer:
      Type: AWS::ApiGateway::Authorizer
      Properties:
        Name: CognitoUserPool
        Type: COGNITO_USER_POOLS
        IdentitySource: method.request.header.Authorization
        RestApiId:
          Ref: ApiGatewayRestApi
        ProviderARNs:
          - { Ref: CognitoUserPool }

plugins:
  - serverless-webpack
  - serverless-export-env
  - serverless-dynamodb-local
  - serverless-offline

package:
  individually: true

custom:
  webpack:
    webpackConfig: "webpack.config.js"
    includeModules: false
    packager: "npm"
    excludeFiles: src/**/*.test.js
  dynamodb:
    stages:
      - dev
    start:
      port: 8000
      migrate: true
      inMemory: true
    migration:
      dir: offline/migrations
  tablename: "TaskTable"
  folderEndpoints: "src/endpoints"
